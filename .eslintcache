[{"C:\\Users\\coder\\ReactJS\\todo-list\\src\\index.tsx":"1","C:\\Users\\coder\\ReactJS\\todo-list\\src\\reportWebVitals.ts":"2","C:\\Users\\coder\\ReactJS\\todo-list\\src\\App.tsx":"3","C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\todo-list.tsx":"4","C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\todo-form.tsx":"5","C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\todo-item.tsx":"6","C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\footer.tsx":"7","C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\alert-delete.tsx":"8","C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\create-todo-item.tsx":"9","C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\date-time-picker.tsx":"10"},{"size":462,"mtime":1609921629966,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":2734,"mtime":1609924151304,"results":"14","hashOfConfig":"12"},{"size":819,"mtime":1609848167659,"results":"15","hashOfConfig":"12"},{"size":859,"mtime":1609926260675,"results":"16","hashOfConfig":"12"},{"size":2051,"mtime":1609930260822,"results":"17","hashOfConfig":"12"},{"size":485,"mtime":1609844953603,"results":"18","hashOfConfig":"12"},{"size":1798,"mtime":1609906068225,"results":"19","hashOfConfig":"12"},{"size":4601,"mtime":1609926965781,"results":"20","hashOfConfig":"12"},{"size":949,"mtime":1609918502754,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1wvx6c6",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\coder\\ReactJS\\todo-list\\src\\index.tsx",[],["46","47"],"C:\\Users\\coder\\ReactJS\\todo-list\\src\\reportWebVitals.ts",[],"C:\\Users\\coder\\ReactJS\\todo-list\\src\\App.tsx",["48"],"import React, { useState } from 'react';\nimport './css/style.css'\nimport TodoForm from './components/todo-form';\nimport TodoList from './components/todo-list';\nimport { TodoInterface, TodoItemInterface } from './modal/interface';\nimport Footer from './components/footer';\n\nfunction App() {\n  const [todos, setTodos] = useState<TodoInterface[]>([])\n  const [checkAllActive, setcheckAllActive] = useState(true);\n  const [filter, setFilter] = useState(0)\n\n\n  const handleTodoCreate = (todo: TodoInterface) => {\n    const newTodosState: TodoInterface[] = [...todos]\n    newTodosState.push(todo)\n    console.log(\"NEW todostate: \", newTodosState)\n    setTodos(newTodosState)\n  }\n\n  const handleTodoUpdate = (event: React.ChangeEvent<HTMLInputElement>, id: string) => {\n    const newTodosState: TodoInterface[] = [...todos]\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.text = event.target.value\n    setTodos(newTodosState)\n  }\n\n  const handleTodoRemove = (id: string) => {\n    const newTodosState: TodoInterface[] = todos.filter((todo: TodoInterface) => todo.id !== id)\n    setTodos(newTodosState)\n  }\n\n  const handleTodoComplete = (id: string) => {\n    const newTodosState: TodoInterface[] = [...todos]\n    newTodosState.find((todo: TodoInterface) => todo.id === id)!.isCompleted\n      = !newTodosState.find((todo: TodoInterface) => todo.id === id)!.isCompleted\n    setTodos(newTodosState)\n  }\n\n  const handleTodoBlur = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.value.length === 0) {\n      event.target.classList.add('todo-input-error')\n    } else {\n      event.target.classList.remove('todo-input-error')\n    }\n  }\n\n  const checkAllTodos = () => {\n    todos.forEach(todo => {\n      todo.isCompleted = checkAllActive\n    })\n    setcheckAllActive(!checkAllActive)\n  }\n\n  const filterTodos = () => {\n    switch (filter) {\n      case 0:\n        return todos\n      case 1:\n        return todos.filter(todo => todo.isCompleted === false)\n      case 2:\n        return todos.filter(todo => todo.isCompleted === true)\n      default:\n        return todos\n    }\n  }\n\n  const handleTodoFilter = (filter: number) => {\n    setFilter(filter)\n  }\n\n  return (\n    <div className=\"todo-list-app\">\n      <h1>Todo List</h1>\n      <TodoForm\n        handleTodoBlur={handleTodoBlur}\n        checkAllTodos={checkAllTodos}\n        handleTodoCreate={handleTodoCreate}\n      />\n\n      <TodoList\n        todos={filterTodos()}\n        handleTodoUpdate={handleTodoUpdate}\n        handleTodoRemove={handleTodoRemove}\n        handleTodoComplete={handleTodoComplete}\n        handleTodoBlur={handleTodoBlur}\n      />\n\n      <Footer\n        handleTodoFilter={handleTodoFilter}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\todo-list.tsx",[],"C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\todo-form.tsx",["49","50","51"],"import React from 'react'\r\nimport { TodoFormInterface, TodoInterface } from '../modal/interface'\r\nimport shortid from 'shortid'\r\nimport { Button, Icon } from '@material-ui/core'\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CreateTodoModal from './create-todo-item';\r\n\r\n\r\nexport default function TodoForm(props: TodoFormInterface) {\r\n\r\n    return (\r\n        <div className=\"todo-form\">\r\n            <Button variant=\"contained\" onClick={props.checkAllTodos}>\r\n                <CheckIcon />\r\n            </Button>\r\n\r\n            <CreateTodoModal handleTodoCreate={props.handleTodoCreate}/>\r\n\r\n            <input\r\n                className=\"todo-form-input\"\r\n                required\r\n                type=\"text\"\r\n                placeholder='Enter new todo'\r\n                onBlur={props.handleTodoBlur}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\todo-item.tsx",["52","53"],"C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\footer.tsx",[],"C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\alert-delete.tsx",[],"C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\create-todo-item.tsx",["54"],"import React, { ChangeEvent } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport { Button, DialogActions, TextField } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { TodoInterface } from '../modal/interface';\r\nimport shortid from 'shortid';\r\n\r\ninterface CreateTodoInterface {\r\n    handleTodoCreate: (todo: TodoInterface) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    addicon: {\r\n        fontSize: '33px'\r\n    },\r\n\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n\r\n    textField: {\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(2),\r\n      width: 200,\r\n    },\r\n}));\r\n\r\nexport default function CreateTodoModal(props: CreateTodoInterface) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [textfieldState, setTextfieldState] = React.useState('')\r\n    const [dateTimeState, setDateTimeState] = React.useState<Date>(new Date())\r\n    const inputRef = React.useRef<HTMLInputElement>(null)\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleInputChange = (event: any) => {\r\n        setTextfieldState(event.target.value)\r\n    }\r\n\r\n    const handleDateTimeChange = (event: any) => {\r\n        console.log(event.target.value);\r\n        console.log(new Date(event.target.value));\r\n        \r\n        setDateTimeState(new Date(event.target.value))\r\n\r\n    }\r\n\r\n    const handleSubmit = (event: any) => {\r\n        \r\n        const newTodo: TodoInterface = {\r\n            id: shortid.generate(),\r\n            text: textfieldState,\r\n            isCompleted: false,\r\n            dateTime: dateTimeState\r\n        }\r\n        if(newTodo.text.length === 0){\r\n            alert(\"Field can not be empty!!!\")\r\n        } else{\r\n            props.handleTodoCreate(newTodo)\r\n        }\r\n        // Create new todo item\r\n        \r\n\r\n        // Reset the input field\r\n        if (inputRef && inputRef.current) {\r\n            inputRef.current.value = ''\r\n        }\r\n        handleClose()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={handleOpen}>\r\n                <AddIcon className={classes.addicon} />\r\n            </Button>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n\r\n                <Fade in={open}>\r\n                    <div className={classes.paper}>\r\n                        <h3 id=\"transition-modal-title\">Create New Todo</h3>\r\n\r\n                        <TextField id=\"standard-basic\"\r\n                            label=\"Todo\"\r\n                            onChange={event => handleInputChange(event)} \r\n                            />\r\n                        <br/>\r\n\r\n                        <TextField\r\n                            id=\"datetime-local\"\r\n                            required\r\n                            label=\"Deadline\"\r\n                            type=\"datetime-local\"\r\n                            onChange={handleDateTimeChange}\r\n                            className={classes.textField}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n\r\n                        <DialogActions>\r\n                            <Button variant=\"outlined\" color=\"secondary\" onClick={handleClose}>\r\n                                Cancel\r\n                        </Button>\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={(event) => handleSubmit(event)}>\r\n                                Save\r\n                        </Button>\r\n                        </DialogActions>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}","C:\\Users\\coder\\ReactJS\\todo-list\\src\\components\\date-time-picker.tsx",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":5,"column":25,"nodeType":"61","messageId":"62","endLine":5,"endColumn":42},{"ruleId":"59","severity":1,"message":"63","line":2,"column":29,"nodeType":"61","messageId":"62","endLine":2,"endColumn":42},{"ruleId":"59","severity":1,"message":"64","line":3,"column":8,"nodeType":"61","messageId":"62","endLine":3,"endColumn":15},{"ruleId":"59","severity":1,"message":"65","line":4,"column":18,"nodeType":"61","messageId":"62","endLine":4,"endColumn":22},{"ruleId":"59","severity":1,"message":"66","line":2,"column":8,"nodeType":"61","messageId":"62","endLine":2,"endColumn":14},{"ruleId":"67","severity":1,"message":"68","line":19,"column":8,"nodeType":"69","endLine":19,"endColumn":20,"suggestions":"70"},{"ruleId":"59","severity":1,"message":"71","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":28},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"@typescript-eslint/no-unused-vars","'TodoItemInterface' is defined but never used.","Identifier","unusedVar","'TodoInterface' is defined but never used.","'shortid' is defined but never used.","'Icon' is defined but never used.","'moment' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onDeadline'. Either include it or remove the dependency array.","ArrayExpression",["74"],"'ChangeEvent' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},"Update the dependencies array to be: [onDeadline, props.todo]",{"range":"77","text":"78"},[693,705],"[onDeadline, props.todo]"]